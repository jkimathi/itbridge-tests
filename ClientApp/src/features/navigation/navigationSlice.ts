import { createAsyncThunk, createSlice, PayloadAction }
 from "@reduxjs/toolkit";

import { RootState, AppThunk } from "../../App/store";

export interface navigationState {
  navStateValue: boolean;
  navSearchPageState:boolean;
}

const initialState: navigationState = {
  navStateValue: true,
  navSearchPageState: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const navigationSlice = createSlice({
  name: "navigation",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changenav: (state) => {
      state.navStateValue = !state.navStateValue;
    },
    changenavSearchPage: (state) => {
      state.navSearchPageState = !state.navSearchPageState;
    },
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { changenav, changenavSearchPage } = navigationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectNavigationState = (state: RootState) =>
  state.navigationVal.navStateValue;
export const selectNavigationSearchPageState=(state:RootState)=>state.navigationVal.navSearchPageState;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default navigationSlice.reducer;
